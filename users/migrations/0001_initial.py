# Generated by Django 3.0.1 on 2019-12-29 15:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(max_length=255, verbose_name='fornavn')),
                ('last_name', models.CharField(max_length=255, verbose_name='etternavn')),
                ('birth_date', models.DateField(verbose_name='f√∏dselsdag')),
                ('phone_number', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='e-post')),
                ('has_confirmed_email', models.BooleanField(default=False)),
                ('address', models.CharField(max_length=255, verbose_name='adresse')),
                ('zip_code', models.CharField(max_length=255, verbose_name='postkode')),
                ('zip_place', models.CharField(max_length=255, verbose_name='poststed')),
                ('disabled_emails', models.BooleanField(default=False)),
                ('subscribed_to_newsletter', models.BooleanField(default=True)),
                ('allow_personalization', models.BooleanField(default=True)),
                ('allow_third_party_personalization', models.BooleanField(default=True)),
                ('acquisition_source', models.CharField(blank=True, max_length=255, verbose_name='Opprettet gjennom')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date_joined')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'permissions': (('has_users_export', 'Can export users list'), ('has_users_access', 'Can list and search users'), ('has_user_add', 'Allows the user to add new users'), ('has_user_management', 'Can edit user details'), ('has_user_export', 'Can export user details'), ('has_user_hijack', 'Can log in as user'), ('has_user_high_level_management', 'Can toggle users active state')),
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Tittel')),
                ('is_sticky', models.BooleanField(default=False)),
                ('content', models.TextField()),
                ('date_edited', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='note_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_noted', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Note',
                'verbose_name_plural': 'Notes',
                'permissions': (('has_note_view', 'User can view notes'), ('has_note_add', 'User can add notes'), ('has_note_edit', 'User can edit notes'), ('has_note_delete', 'User can delete notes')),
            },
        ),
    ]
